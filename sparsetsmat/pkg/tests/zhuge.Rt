> # construct a large example with Date indices
> options(error=function(x) NULL)
> set.seed(1)
> n <- 2537
> m <- 12119
> m5.mat <- sparsetsmat:::locf.default(matrix(replace(rep(as.character(NA), n*m), sample(n*m, max(3*n, 1.5*m)), sample(c(letters, LETTERS), max(3*n, 1.5*m), rep=TRUE)), nrow=n, ncol=m, dimnames=list(as.character(seq(as.Date('2001-01-01'), len=n, by='days')), paste('V', seq(m), sep=''))))
> m5.tsm <- sparsetsmat(m5.mat)
> head(as.data.frame(m5.tsm))
       dates ids values
1 2001-09-17  V1      F
2 2003-10-05  V2      F
3 2005-08-07  V3      p
4 2001-01-30  V4      L
5 2003-02-11  V5      i
6 2007-05-19  V5      T
> 
> m5.tsm
2537 x 12119 sparse persistent time-series matrix of class 'sparsetsmat'
  rownames[2537] class 'Date', 2001-01-01, 2001-01-02, ..., 2007-12-12
  colnames[12119] class 'character', V1, V2, ..., V12119
  values class 'character', a, A, ..., Z (length 52, 52 unique, 0 NAs)
  data.frame column names: dates, ids, values
> str(m5.tsm)
List of 9
 $ dates      : Date[1:18005], format: "2001-09-17" "2003-10-05" ...
 $ values     : chr [1:18005] "F" "F" "p" "L" ...
 $ ids        : chr [1:12119] "V1" "V2" "V3" "V4" ...
 $ id.idx     : int [1:12119] 1 2 3 4 5 NA 7 8 9 11 ...
 $ id.noc     : int [1:12119] 1 1 1 1 2 0 1 1 2 4 ...
 $ all.dates  : Date[1:2537], format: "2001-01-01" "2001-01-02" ...
 $ df.colnames: chr [1:3] "dates" "ids" "values"
 $ backfill   : logi FALSE
 $ sort.ids   : logi FALSE
 - attr(*, "class")= chr "sparsetsmat"
> dim(m5.tsm)
[1]  2537 12119
> dim(as.matrix(m5.tsm))
[1]  2537 12119
> m5.tsm[258:264,1:6]
           V1  V2 V3 V4  V5 V6
2001-09-15 NA  NA NA "L" NA NA
2001-09-16 NA  NA NA "L" NA NA
2001-09-17 "F" NA NA "L" NA NA
2001-09-18 "F" NA NA "L" NA NA
2001-09-19 "F" NA NA "L" NA NA
2001-09-20 "F" NA NA "L" NA NA
2001-09-21 "F" NA NA "L" NA NA
> 
> # dense matrix is 235Mb
> object.size(m5.mat)/2^20
#@ignore-output
235.377502441406 bytes
> # sparse matrix is <1Mb
> object.size(m5.tsm)/2^20
#@ignore-output
0.959808349609375 bytes
> # most columns have 6 or less different values
> table(apply(m5.mat, 2, function(x) length(unique(x))))

   1    2    3    4    5    6    7    8    9 
2747 4051 3068 1531  531  149   34    6    2 
> table(apply(m5.mat, 2, function(x) round(sum(is.na(x)) / 500)))

   0    1    2    3    4    5 
1644 2704 1952 1533 1084 3202 
> 
> sum(is.na(m5.mat))/length(m5.mat)
[1] 0.518241
> 
> all.equal(m5.mat, as.matrix(m5.tsm))
[1] TRUE
> all.equal(m5.tsm[cbind(c(row(m5.mat)), c(col(m5.mat)))], c(m5.mat))
[1] TRUE
> all.equal(m5.tsm[data.frame(c(row(m5.mat)), c(col(m5.mat)))], c(m5.mat))
[1] TRUE
> all.equal(m5.tsm[data.frame(rownames(m5.tsm)[c(row(m5.mat))], c(col(m5.mat)))], c(m5.mat))
[1] TRUE
> all.equal(m5.tsm[data.frame(m5.tsm$all.dates[c(row(m5.mat))], c(col(m5.mat)))], c(m5.mat))
[1] TRUE
> 
> # 3 times slower to retrieve single rows
> system.time(sapply(1:nrow(m5.mat), function(i) length(m5.mat[i,])))
#@ignore-output
   user  system elapsed 
  1.547   0.093   1.632 
> system.time(sapply(1:nrow(m5.mat), function(i) length(m5.tsm[i,])))
#@ignore-output
   user  system elapsed 
  4.656   0.261   4.884 
>
> # 60 times slower to retrieve columns!
> # (this is because the rows names are constructed on the result each time
> #  by formatting a POSIXct object)
> system.time(sapply(1:ncol(m5.mat), function(i) length(m5.mat[,i])))
#@ignore-output
   user  system elapsed 
  0.646   0.062   0.704 
> system.time(sapply(1:ncol(m5.mat), function(i) length(m5.tsm[,i])))
#@ignore-output
   user  system elapsed 
 38.200   1.332  39.302 
> # but only 6 times slower if we suppress dimension names
> system.time(sapply(1:ncol(m5.mat), function(i) length(m5.tsm[,i,naked=T])))
#@ignore-output
   user  system elapsed 
  2.361   0.120   2.462 
>
> # about the same to retrieve a subset of rows
> system.time(sapply(1:50, function(i) length(m5.tsm[100:200,])))
#@ignore-output
   user  system elapsed 
  1.888   0.502   2.376 
> system.time(sapply(1:50, function(i) length(m5.mat[100:200,])))
#@ignore-output
   user  system elapsed 
  1.875   0.159   2.031 
> 
> system.time(sapply(1:50, function(i) length(m5.tsm[2100:2200,])))
#@ignore-output
   user  system elapsed 
  2.035   0.536   2.562 
> system.time(sapply(1:50, function(i) length(m5.mat[2100:2200,])))
#@ignore-output
   user  system elapsed 
  1.896   0.166   2.054 
> 
> # 3 to 4 times slower to retrieve a subset of columns
> system.time(sapply(1:50, function(i) length(m5.mat[,100:200])))
#@ignore-output
   user  system elapsed 
  0.202   0.030   0.231 
> system.time(sapply(1:50, function(i) length(m5.tsm[,100:200])))
#@ignore-output
   user  system elapsed 
  0.659   0.100   0.755 
> 