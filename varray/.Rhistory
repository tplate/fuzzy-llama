source.pkg()
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
source.pkg()
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
source.pkg()
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
source.pkg()
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
v
ls()
vvv.2001
vvv.2002
rm(vvv.2001)
rm(vvv.2002)
rm(v)
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
v
ls()
vvv.2001
vvv.2002
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
source.pkg()
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
source.pkg()
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
v
as.array(v)
x
all.equal(x, as.array(v))
y
x
v <- update.varray.ts('v', y)
source.pkg()
v <- update.varray.ts('v', y)
old.slices
ex.ai
new.scn.u
va
unclass(va)
va$along.idx
length(va$along.idx)
old.slices
ex.ai
data.ii <- which(!is.na(ex.ai))
data.ii
va$along.idx[ex.ai[data.ii]]
exist.comp.i <- va$along.idx[ex.ai[data.ii]]
exist.comp.i
exist.comp.i
Q
source.pkg()
v <- update.varray.ts('v', y)
va
unclass(va)
x
y
Q
source.pkg()
v <- update.varray.ts('v', y)
this.data
new.scn
new.scn.u
dim(data)
new.slices
Q
source.pkg()
v <- update.varray.ts('v', y)
va
va$info[[i]]
this.data.dn
va$info[[i]]$dimnames
mapply(va$info[[i]]$dimnames, this.data.dn, FUN=function(x) browser())
args(mapply)
mapply(va$info[[i]]$dimnames, this.data.dn, FUN=function(x, y) browser())
x
y
Q
source.pkg()
v <- update.varray.ts('v', y)
source.pkg()
v <- update.varray.ts('v', y)
need.expand
args(mappy)
args(mapply)
?mapply
?sapply
va$info
vvv.2002
this.data
conform(list(vvv.2002, this.data), how='union')
args(conform)
conform(list(vvv.2002, this.data), do.all='union')
conform(vvv.2002, this.data, do.all='union')
seq(along=NULL)
Q
source.pkg()
as.array(y)
as.array(v)
v <- update.varray.ts('v', y)
as.environment('.GlobalEnv')
?get
source.pkg()
as.array(v)
v <- update.varray.ts('v', y)
source.pkg()
v <- update.varray.ts('v', y)
need.expand
args(mappy)
args(mapply)
?mapply
?sapply
va$info
vvv.2002
this.data
conform(list(vvv.2002, this.data), how='union')
args(conform)
conform(list(vvv.2002, this.data), do.all='union')
conform(vvv.2002, this.data, do.all='union')
seq(along=NULL)
Q
source.pkg()
as.array(y)
as.array(v)
v <- update.varray.ts('v', y)
as.environment('.GlobalEnv')
?get
source.pkg()
as.array(v)
v <- update.varray.ts('v', y)
source.pkg()
as.array(v)
v <- update.varray.ts('v', y)
source.pkg()
as.array(v)
v <- update.varray.ts('v', y)
source.pkg()
v <- update.varray.ts('v', y)
as.array(v)
vvv.2001
vvv.2002
vvv.2003
as.array(varray(x, y, along=1))
x
y
rm(v)
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
as.array(v)
source.pkg()
v <- update.varray.ts('v', y)
new.dn
exist.comp.i
data.ii
ex.ai
data
ex.ai
new.scn
length(ex.ai)
length(new.scn)
new.scn.u
which(is.na(ex.ai))
new.scn[which(is.na(ex.ai))]
which(is.na(ex.ai))[new.scn == 'vvv.2002']
source.pkg()
v <- update.varray.ts('v', y)
v
as.array(v)
v$info[[2]]
vvv.2002
source.pkg()
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
ls()
Q
source.pkg()
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
v
rm(vvv.2001)
rm(vvv.2002)
rm(vvv.2003)
rm(v)
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
v
as.array(v)
v <- update.varray.ts('v', y)
comp.data
this.data
need.expand
this.data.dn
va$info[[i]]$dimnames
Q
source.pkg()
v <- update.varray.ts('v', y)
v
as.array(v)
?xts
?'[.xts'
Sys.getenv('_R_CHECK_TIMINGS_')
source.pkg()
rm(vvv.2001)
rm(vvv.2002)
rm(vvv.2003)
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
i
exist.comp.i
Q
source.pkg()
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
rm(v)
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
v
as.array(v)
v <- update.varray.ts('v', y)
as.array(v)
v
##------* Session start at Sun Sep 30 22:00:45 2012 *------##
ls()
rm(pat='vvv.*')
ls()
args(rm)
rm(list=ls(pat='vvv.*'))
x
y
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
as.array(v)
v <- update.varray.ts('v', y)
as.array(v)
v
ls()
rm(pat='vvv.*')
ls()
args(rm)
rm(list=ls(pat='vvv.*'))
x
y
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
as.array(v)
v <- update.varray.ts('v', y)
as.array(v)
source.pkg()
v
as.array(v)
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
as.array(v)
v <- update.varray.ts('v', y)
as.array(v)
rm(v)
v <- update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
as.array(v)
v <- update.varray.ts('v', y)
as.array(v)
runtests()
runtests(pat='update')
ls()
rm(list=ls())
runtests(pat='update')
ls()
rm(list=ls())
runtests(pat='varray.Rt')
ls()
x[cbind(c(2,4,3), 2)]
options(error=recover)
x[cbind(c(2,4,3), 2)]
ls()
x$along.idx
Q
source.pkg()
x[cbind(c(2,4,3), 2)]
x
unclass(x)
x$info[[1]]$sample[0]
Q
source.pkg()
x[cbind(c(2,4,3), 2)]
x
as.array(x)
x[cbind(c(3,2,4), 2)]
x[cbind(c(5,1,3,2,4), 2)]
runtests(pat='varray.Rt')
xt
as.array(xt)
source.pkg()
xt[c('b','d'),c('w','x','z')]
ls()
x
dn
d
dn
ai
Q
source.pkg()
xt[c('b','d'),c('w','x','z')]
runtests(pat='varray.Rt')
runtests(pat='update')
args(update.varray.ts)
vt <- update.varray.ts('vt', x, comp.name='vvt.%Y', along=1, dimorder=2:1)
x
ls()
v
vt
args(vt)
vvt <- update.varray.ts('vvt', x, comp.name='vvt.%Y', along=1, dimorder=2:1)
vvt <- update.varray.ts('vvt', x, comp.name='vvt.%Y', along=1, dimorder=2:1)
this.datar
Q
source.pkg()
vvt <- update.varray.ts('vvt', x, comp.name='vvt.%Y', along=1, dimorder=2:1)
vvt
xt
runtests(pat='update')
source.pkg()
search()
ls()
rm(list=ls())
source.pkg()
runtests(pat='update')
vvt
options(error=recover)
update.varray.ts("vvt", y)
comp.data
this.datar
Q
source.pkg()
update.varray.ts("vvt", y)
as.array(vvt)
rm(list=ls())
runtests(pat='update')
?ps
?postscript
postscript(file='tmp1.ps', onefile=T, width=8, height=11)
plot(0:1)
plot(0:99)
dev.off()
pdf(file='tmp1.pdf', onefile=T, width=8, height=11)
plot(0:1)
plot(0:99)
dev.off()
225 * 30
4000 / 225 * 30
4000 / (225 * 30)
1575 / 30
1575 / 7
1925 / 7
275 * 30 * 0.6
##------* Session start at Wed Jan 30 22:48:51 2013 *------##
ls()
rm.varry(v)
source.pkg()
rm.varry(v)
remove.varry(v)
rm.varray(v)
rm.varray(vvt)
x
dim(x)
update.varray('v', x[12:15,])
update.ts.varray('v', x[12:15,])
update.varray.ts('v', x[12:15,])
update.varray.ts('v', x[12:15,], comp.name='vvv.%Y', along=1)
v
update.varray.ts('v', x, comp.name='vvv.%Y', along=1)
v
rownames(v)
rm.varray(v)
update.varray.ts('v', x[12:15,], comp.name='vvv.%Y', along=1)
update.varray.ts('v', x[-12:15,])
update.varray.ts('v', x[-(12:15),])
v
dimnames(v)
rm.varray(v)
source.pkg()
update.varray.ts('v', x[12:15,], comp.name='vvv.%Y', along=1)
update.varray.ts('v', x[-(12:15),])
v
as.array(v)
v$info$map
v$along.idx
args(order)
update.varray.ts('v', x[-(12:15),])
source.pkg()
update.varray.ts('v', x[-(12:15),])
source.pkg()
update.varray.ts('v', x[-(12:15),])
source.pkg()
update.varray.ts('v', x[-(12:15),])
el1
order(el1, na.last=TRUE)
source.pkg()
update.varray.ts('v', x[-(12:15),])
v
##------* Session start at Wed Jan 30 23:25:47 2013 *------##
source.pkg()
rm.varray(v)
update.varray.ts('v', x[12:15,], comp.name='v.%Y', along=1)
update.varray.ts('v', x[-(12:15),])
v
dimnames(v)
as.array(v)
runtests()
rm.varray(v)
ls()
rm.varray(vvt)
ls()
runtests()
dumprout()
runtests()
dumprout()
runtests()
##------* Session start at Sat Jul 20 10:17:42 2013 *------##
source.pkg()
a <- array(1:6, dim=c(2,3), dimnames=list(letters[1:2],letters[23:25]))
b <- array(7:15, dim=c(3,3), dimnames=list(letters[3:5],letters[24:26]))
x <- varray(a,b)
x
M(x)
a
b
b <- b[-2,]
rebuild.varray(x)
source.pkg()
rebuild.varray(x)
M(x)
M(rebuild.varray(x))
b
source.pkg()
M(rebuild.varray(x))
M(x)
y <- rebuild.varray(x)
unlist(y)
names(x)
names(y)
for (i in names(x)) catn(i, identical(x[[i]], y[[i]]))
M(x)
x[c(1,5),]
x[c(1,4),]
x[c('a','e'),]
x[c('a','d'),]
runtests(pat='rebuild')
##------* Session start at Sat Jul 20 11:33:34 2013 *------##
source.pkg()
args(find)
?find
?get
?rm
source.pkg()
ls()
x
rm.varray('x')
options(error=recover)
source.pkg()
rm.varray('x')
x
x.name
find('x')
find('x', numeric=TRUE)
get(x.name, pos=1)
x.name
x
x <- get(x.name, pos=env)
env
where
Q
source.pkg()
rm.varray('x')
ls()
x
x.anme
x.name
find(x.name, numeric=TRUE)
env
ls()
Q
rm.varray(x)
x
env
ls()
source.pkg()
rm.varray(x)
x.name
Q
rm.varray('x')
x.name
is.character(x.name)
Q
source.pkg()
?find
?exists
find('xy')
find('xy', numeric=TRUE)
?rm
mode(0L)
getOption('scriptests.pkg.path')
strsplit('a;b;cde', sep=';')
args(strsplit)
strsplit('a;b;cde', ';')
source.pkg('scriptests')
source.pkg('scriptests', path='d:/tplate/R/rforge/$PKG/pkg')
source.pkg('scriptests', path='d:/tplate/R/rforge/$PKG/pkg;d:/tplate/R/packages/$PKG/pkg')
source.pkg('scriptests', path='d:/tplate/R/rforge/$PKG/pkg;d:/tplate/R/packages/$PKG/pkg')
options('scriptests.pkg.path')
options('scriptests.pkg.path')
source.pkg('scriptests')
runtests(pkg='varray', pattern='rebuild')
source.pkg('scriptests')
runtests(pkg='varray', pattern='rebuild')
source.pkg()
x
y <- varray(a,b, fill=0)
y
as.array(y)
source.pkg()
as.array(y)
y[,'z',drop=F]
y[,'z']
q()
