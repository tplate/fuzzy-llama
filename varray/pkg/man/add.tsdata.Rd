% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/add.tsdata.varray.R
\name{add.tsdata}
\alias{add.tsdata}
\alias{add.tsdata.default}
\alias{add.tsdata.varray}
\title{Add time-series data to an object}
\usage{
add.tsdata(x, ...)

\method{add.tsdata}{default}(x, ...)

\method{add.tsdata}{varray}(x, newdata, comp.name = va$comp.name,
  dateblock = "\%Y", format = va$format, along = va$along,
  dimorder = va$dimorder, env.name = NULL, envir = NULL,
  clear.dim = NULL, naidxok = va$naidxok, change.mode.ok = FALSE,
  need.dimnames = list(NULL, NULL), keep.ordered = va$keep.ordered,
  umode = NULL, store.env.name = FALSE, fill = NA, ...)
}
\arguments{
\item{x}{An object to add time-series data to, either specified by name or by value.
Must have dimnames.
If specified by name (as a character vector), the object is changed in place.}

\item{newdata}{New data to incorporate in the object.
Should have the same number of dimensions as the object
being updated.  Must have dimnames.}

\item{comp.name}{Base of name to use for the component objects in the varray.
Optional, default value is \code{paste('.', objectName, dateblock)}.}

\item{dateblock}{How to translate dates into blocks.  Ignored if argument
\code{comp.name} is supplied. Default value is \code{"\%Y"}.}

\item{format}{Format for parsing dates (which are supplied as dimension names on the
\code{along} dimension).}

\item{along}{Default is 1.}

\item{dimorder}{Default is standard dim order.}

\item{env.name}{Intended to be the name of the environment where the components exist,
not yet fully tested.}

\item{envir}{Intended to be the environment where the components exist,
not yet fully tested.}

\item{clear.dim}{numeric: dimension indices for which to
clear all values when present, e.g., with clear.dim=1,
all rows that match a row supplied in newdata are cleared}

\item{naidxok}{Set this attribute on the varray.  Specifies whether the component objects can handle \code{NA} indices.}

\item{change.mode.ok}{Logical.  If TRUE, the mode of new data does not need to match existing data (default FALSE).}

\item{need.dimnames}{Dimension names that should be included in the updated object.}

\item{keep.ordered}{Logical.  Specifies which dimensions should be kept ordered.  Can be a
single element or a vector with length equal to the number of
dimensions of \code{object}.}

\item{umode}{Not used (may be used in the future)}

\item{store.env.name}{Not used (may be used in the future)}

\item{fill}{The value to fill missing data with in subset operations}

\item{\dots}{Not used, but needed because \code{update()} is a generic.}
}
\value{
The altered object \code{x}.  If \code{x} was the
name of an object, then the altered object is also
updated in place.
}
\description{
Add time-series data to an object
The only thing that makes an object time series data is that the
dimnames on one dimension are character strings representing parsable
times or dates.
}
\details{
Contents of \code{data} are inserted into \code{object}, expanding the
dimensions of \code{object} and creating new component objects if necessary.
\code{update.varray.ts} is an obselete name for \code{add.tsdata.varray}.
}
\examples{
x <- array(1:45, dim=c(15, 3), dimnames=list(format(seq(as.Date('2001-05-01'), len=15, by='months')), c('A','B','C')))
y <- array(101:121, dim=c(7, 3), dimnames=list(format(seq(as.Date(rownames(x)[nrow(x)]), len=7, by='months')), c('B','C','D')))
z <- array(1:72, dim=c(24, 3), dimnames=list(format(seq(as.Date('2001-05-01'), len=24, by='months')), c('A','B','C')))
add.tsdata.varray('v', z, comp.name='vvv.\\\%Y', along=1)
as.array(v)
add.tsdata.varray('v', y)
as.array(v)
}
\seealso{
Related to \code{\link{add.data}}, but
specialized for time-series data with arguments
specialized for handling dates.
\code{add.data} is the only supplied method for changing \code{\link{varray}} objects.
}

